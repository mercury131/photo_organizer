import os
import sqlite3
from PIL import Image
import imagehash
from multiprocessing import Pool, cpu_count, freeze_support
from tqdm import tqdm
import yaml
import sys
import locale
import tkinter as tk
from tkinter import filedialog
from pathlib import Path

# –§–∏–∫—Å –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –≤ Windows
if sys.platform.startswith('win'):
    sys.stdin.reconfigure(encoding='utf-8')
    sys.stdout.reconfigure(encoding='utf-8')
    locale.setlocale(locale.LC_ALL, 'Russian_Russia.65001')





# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è multiprocessing
def process_file_create(file_path):
    try:
        with Image.open(file_path) as img:
            phash = str(imagehash.phash(img))
            return (phash, file_path)
    except Exception as e:
        return None

def process_file_find(args):
    file_path, db_path = args
    try:
        with Image.open(file_path) as img:
            phash = str(imagehash.phash(img))
            conn = sqlite3.connect(db_path)
            c = conn.cursor()
            c.execute('SELECT file_path FROM images WHERE phash = ?', (phash,))
            result = c.fetchone()
            conn.close()
            return (file_path, result[0] if result else None)
    except Exception as e:
        return (file_path, None)


def create_db(home_library_path, db_path='phash_db.sqlite'):
    conn = sqlite3.connect(db_path)
    c = conn.cursor()
    print("home_library_path - ",home_library_path)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –∏–Ω–¥–µ–∫—Å—ã (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç)
    c.execute('''CREATE TABLE IF NOT EXISTS images 
                (phash TEXT, file_path TEXT UNIQUE)''')  # –î–æ–±–∞–≤–ª—è–µ–º UNIQUE constraint
    c.execute('CREATE INDEX IF NOT EXISTS phash_idx ON images (phash)')
    c.execute('CREATE INDEX IF NOT EXISTS file_path_idx ON images (file_path)')

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—É—Ç–∏ –∏–∑ –ë–î
    existing_files = set()
    print("üïµÔ∏è Checking existing files in database...")
    c.execute('SELECT file_path FROM images')
    for row in c.fetchall():
        existing_files.add(row[0])
    print(f"Found {len(existing_files)} pre-existing files in DB")

    # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    print("üîç Scanning for new files...")
    new_files = []
    for root, _, files in os.walk(home_library_path):
        for f in files:
            file_path = os.path.join(root, f)
            if file_path.lower().endswith(('jpg', 'jpeg', 'png', 'gif', 'bmp')) and file_path not in existing_files:
                new_files.append(file_path)

    total_new = len(new_files)
    if total_new == 0:
        print("‚úÖ All files already in database!")
        conn.close()
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    progress = tqdm(total=total_new, desc="Processing", unit="file")
    
    with Pool(cpu_count()) as pool:
        for result in pool.imap_unordered(process_file_create, new_files, chunksize=50):
            if result:
                try:
                    c.execute('INSERT INTO images VALUES (?, ?)', result)
                except sqlite3.IntegrityError:  # –ù–∞ —Å–ª—É—á–∞–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
                    pass
            progress.update()
    
    conn.commit()
    progress.close()
    print(f"Added {total_new} new files to database")
    conn.close()


def find_duplicates(new_dirs, db_path='phash_db.sqlite', output_dup='duplicates.txt', output_uniq='unique.txt'):
    conn = sqlite3.connect(db_path)
    c = conn.cursor()

    # –°–±–æ—Ä —Ñ–∞–π–ª–æ–≤
    print("üîç Collecting files to check...")
    new_files = []
    search_roots = [os.path.normpath(d) for d in new_dirs]  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    
    for d in new_dirs:
        for root, _, files in os.walk(d):
            for f in files:
                if f.lower().endswith(('jpg', 'jpeg', 'png', 'gif', 'bmp')):
                    new_files.append(os.path.join(root, f))

    total_files = len(new_files)
    if total_files == 0:
        print("‚ùå No files to process!")
        conn.close()
        return

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    args_list = [(file_path, db_path) for file_path in new_files]

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    duplicates = []
    unique = []
    
    print(f"üïµÔ∏è Processing {total_files} files...")
    with tqdm(total=total_files, desc="Analyzing", unit="file") as progress:
        with Pool(cpu_count()) as pool:
            for file_path, original in pool.imap_unordered(process_file_find, args_list):
                if original:
                    duplicates.append((file_path, original))
                else:
                    unique.append(file_path)
                progress.update()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
    print("üíæ Saving results...")
    
    # 1. –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è duplicates.txt
    with open(output_dup, 'w', encoding='utf-8', errors='replace') as f:
        f.write('\n'.join([f"{dup[0]}\t{dup[1]}" for dup in duplicates]))
    
    # 2. –§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è duplicates_filtered.txt (—Ç–æ–ª—å–∫–æ –∏–∑ –ø—Ä–æ–≤–µ—Ä—è–µ–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π)
    filtered_duplicates = [
        dup for dup in duplicates 
        if any(os.path.normpath(dup[0]).startswith(root) for root in search_roots)
    ]
    
    with open('duplicates_filtered.txt', 'w', encoding='utf-8', errors='replace') as f:
        f.write('\n'.join([dup[0] for dup in filtered_duplicates]))
    
    # –§–∞–π–ª unique.txt
    with open(output_uniq, 'w', encoding='utf-8', errors='replace') as f:
        f.write('\n'.join(unique))

    conn.close()
    print(f"‚úÖ Done! Duplicates: {len(duplicates)}, Filtered duplicates: {len(filtered_duplicates)}, Unique: {len(unique)}")


def select_directory():
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç–æ–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ Tkinter
    root = tk.Tk()
    root.withdraw()  # –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    directory = filedialog.askdirectory(
        title="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤",
        initialdir="C:\\",  # –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        mustexist=True  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∏
    )
    
    if directory:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–∞—Ç–∞–ª–æ–≥
        normalized_path = Path(directory).resolve().as_posix().replace('/', '\\')
        print("–í—ã–±–æ—Ä - ",normalized_path)
        find_duplicates([normalized_path])
    else:
        print("–í—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω.")    

if __name__ == '__main__':

    with open('config.yaml', 'r', encoding='utf-8') as file:
        application_config = yaml.safe_load(file)

    photo_db_path=(application_config['library']['path'])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞
    if not os.path.exists('phash_db.sqlite'):
        create_db(photo_db_path)
        
    else:
        print("–§–∞–π–ª phash_db.sqlite —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        select_directory()
    freeze_support()
    # create_db('F:\\–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏')  # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    #find_duplicates(['E:\\–ê–Ω—è —Ñ–æ—Ç–æ —Å –¥–∏—Å–∫–æ–≤\\Google —Ñ–æ—Ç–æ Takeout\\Google –§–æ—Ç–æ'])
    