import os
import sqlite3
from tqdm import tqdm
import tkinter as tk
from tkinter import filedialog
from pathlib import Path

def find_internal_duplicates(target_dir, db_path='phash_db.sqlite', 
                            output_all='internal_duplicates.txt',
                            output_filtered='internal_duplicates_filtered.txt'):
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ë–î
    target_dir = os.path.normpath(target_dir) + os.sep
    
    conn = sqlite3.connect(db_path)
    c = conn.cursor()
    
    print("üîç Searching for files in target directory...")
    # –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–µ –∏ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
    c.execute('''
        SELECT phash, file_path 
        FROM images 
        WHERE file_path LIKE ? || '%'
    ''', (target_dir,))
    
    files_in_target = c.fetchall()
    
    if not files_in_target:
        print("‚ùå No files found in target directory!")
        conn.close()
        return

    print(f"üìÅ Found {len(files_in_target)} files in target directory")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ phash
    hash_groups = {}
    for phash, file_path in files_in_target:
        if phash not in hash_groups:
            hash_groups[phash] = []
        hash_groups[phash].append(file_path)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –≥—Ä—É–ø–ø—ã —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏
    duplicates = {k: v for k, v in hash_groups.items() if len(v) > 1}
    
    print(f"üîÑ Found {len(duplicates)} duplicate groups")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏
    all_duplicates = []
    filtered_duplicates = []
    
    for group in duplicates.values():
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        for i in range(len(group)):
            for j in range(i+1, len(group)):
                all_duplicates.append(f"{group[i]}\t{group[j]}")
        
        # –î–ª—è filtered —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –ø—É—Ç–∏
        filtered_duplicates.extend(group[1:])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("üíæ Saving results...")
    
    # 1. –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞—Ä –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    with open(output_all, 'w', encoding='utf-8') as f:
        f.write('\n'.join(all_duplicates))
    
    # 2. –°–ø–∏—Å–æ–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤—Å–µ –∫–æ–ø–∏–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ)
    with open(output_filtered, 'w', encoding='utf-8') as f:
        f.write('\n'.join(filtered_duplicates))
    
    conn.close()
    print(f"‚úÖ Done! Total duplicate pairs: {len(all_duplicates)}, Files to delete: {len(filtered_duplicates)}")
    

def select_directory():
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä—ã—Ç–æ–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ Tkinter
    root = tk.Tk()
    root.withdraw()  # –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    directory = filedialog.askdirectory(
        title="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ (–í–Ω—É—Ç—Ä–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏)",
        initialdir="C:\\",  # –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        mustexist=True  # –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∏
    )
    
    if directory:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–∞—Ç–∞–ª–æ–≥
        normalized_path = Path(directory).resolve().as_posix().replace('/', '\\')
        print("–í—ã–±–æ—Ä - ",normalized_path)
        find_internal_duplicates(normalized_path)
    else:
        print("–í—ã–±–æ—Ä –æ—Ç–º–µ–Ω–µ–Ω.")  
    

if __name__ == '__main__':
    #target_directory = 'F:\\–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\\2023'  # –£–∫–∞–∂–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É—Ç—å
    #find_internal_duplicates(target_directory)
    select_directory()